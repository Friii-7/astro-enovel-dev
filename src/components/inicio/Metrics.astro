---
// Componente Metrics - Sección de estadísticas
---

<section class="metrics-section" id="metrics-section">
  <div class="metrics-container">
    <div class="metrics-grid">
      <div class="metric-card">
        <div class="metric-number" id="counter-1" data-target="15">+0</div>
        <div class="metric-label">Años de experiencia</div>
      </div>
      <div class="metric-card">
        <div class="metric-number" id="counter-2" data-target="50">+0</div>
        <div class="metric-label">Clientes</div>
      </div>
      <div class="metric-card">
        <div class="metric-number" id="counter-3" data-target="90">+0</div>
        <div class="metric-label">Proyectos</div>
      </div>
      <div class="metric-card">
        <div class="metric-number" id="counter-4" data-target="100">+0</div>
        <div class="metric-label">Procesos digitalizados</div>
      </div>
    </div>
  </div>
</section>

<style>
  .metrics-section {
    background: transparent;
    padding: 4rem 22rem;
    margin-top: -13rem;
    margin-bottom: -11rem;
    position: relative;
    z-index: 10;
  }

  .metrics-container {
    max-width: 1200px;
    margin: 0 auto;
    background: #ffffff;
    padding: 2rem 2rem;
    border-radius: 4px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 2rem;
    align-items: stretch;
  }

  .metric-card {
    background: #fa4517;
    color: #ffffff;
    padding: 2.5rem 1.5rem;
    border-radius: 4px;
    text-align: center;
    box-shadow: 0 8px 25px rgba(250, 69, 23, 0.2);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .metric-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.1) 0%,
      rgba(255, 255, 255, 0.05) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .metric-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 15px 35px rgba(250, 69, 23, 0.3);
  }

  .metric-card:hover::before {
    opacity: 1;
  }

  .metric-number {
    font-size: 3rem;
    font-weight: 700;
    line-height: 1;
    margin-bottom: 0.5rem;
    position: relative;
    z-index: 1;
    transition: all 0.3s ease;
    color: #ffffff;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .metric-number.animating {
    animation: pulse 0.3s ease-in-out;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.08);
    }
    100% {
      transform: scale(1);
    }
  }

  .metric-label {
    font-size: 1.1rem;
    font-weight: 500;
    line-height: 1.3;
    position: relative;
    z-index: 1;
  }

  /* ===== Metrics Section Responsive ===== */

  /* Tablet & Small Desktop */
  @media screen and (max-width: 768px) {
    .metrics-section {
      padding: 1.5rem 1rem;
      margin-top: -2rem;
      margin-bottom: -2rem;
    }
    .metrics-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
    .metric-card {
      padding: 2rem 1rem;
    }
    .metric-number {
      font-size: 2.5rem;
    }
    .metric-label {
      font-size: 1rem;
    }
  }

  /* Small Mobile */
  @media screen and (max-width: 480px) {
    .metrics-section {
      padding: 1rem 0.5rem;
      margin-top: -1.5rem;
      margin-bottom: -1.5rem;
    }
    .metrics-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }
    .metric-card {
      padding: 1rem 0.5rem;
      aspect-ratio: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 120px;
    }
    .metric-number {
      font-size: 1.8rem;
      margin-bottom: 0.3rem;
    }
    .metric-label {
      font-size: 0.8rem;
    }
  }
</style>

<script>
  // Función para animar contadores
  function animateCounter(
    element: HTMLElement,
    target: number,
    duration: number = 2000
  ) {
    let start = 0;
    const increment = target / (duration / 16); // 60fps

    function updateCounter() {
      start += increment;
      if (start < target) {
        element.textContent = "+" + Math.floor(start).toString();
        requestAnimationFrame(updateCounter);
      } else {
        element.textContent = "+" + target.toString();
      }
    }

    updateCounter();
  }

  // Observer para detectar cuando la sección está visible
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const counters = entry.target.querySelectorAll(".metric-number");
          counters.forEach((counter) => {
            const target = parseInt(counter.getAttribute("data-target") || "0");
            animateCounter(counter as HTMLElement, target);
          });
          observer.unobserve(entry.target);
        }
      });
    },
    { threshold: 0.5 }
  );

  // Observar la sección de métricas
  document.addEventListener("DOMContentLoaded", () => {
    const metricsSection = document.getElementById("metrics-section");
    if (metricsSection) {
      observer.observe(metricsSection);
    }
  });
</script>

